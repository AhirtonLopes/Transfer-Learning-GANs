{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ahirtonlopes/anaconda3/lib/python3.6/site-packages/h5py/__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\n",
      "  from ._conv import register_converters as _register_converters\n",
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "from keras.datasets import cifar10\n",
    "from keras.models import Sequential, Model\n",
    "from keras.layers import Dense, LeakyReLU, BatchNormalization\n",
    "from keras.layers import Conv2D, Conv2DTranspose, Reshape, Flatten\n",
    "from keras.layers import Input, Flatten, Embedding, multiply, Dropout\n",
    "from keras.layers import Concatenate, GaussianNoise,Activation\n",
    "from keras.optimizers import Adam\n",
    "from keras.utils import np_utils, to_categorical\n",
    "from keras import initializers\n",
    "from keras import backend as K"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# load dataset\n",
    "\n",
    "(X_train, y_train), (X_test, y_test) = cifar10.load_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10d89ea20>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "num_classes = len(np.unique(y_train))\n",
    "class_names = ['aviao','automovel','passaro','gato','veado',\n",
    "               'cachorro','sapo','cavalo','navio','caminhao']\n",
    "\n",
    "fig = plt.figure(figsize=(8,3))\n",
    "for i in range(num_classes):\n",
    "    ax = plt.subplot(2, 5, 1 + i, xticks=[], yticks=[])\n",
    "    idx = np.where(y_train[:]==i)[0]\n",
    "    features_idx = X_train[idx,::]\n",
    "    img_num = np.random.randint(features_idx.shape[0])\n",
    "    img = features_idx[img_num,::]\n",
    "    ax.set_title(class_names[i])\n",
    "    plt.imshow(img)\n",
    "    \n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train shape: (50000, 32, 32, 3)\n",
      "50000 amostras de treinamento\n",
      "10000 amostras de teste\n"
     ]
    }
   ],
   "source": [
    "print('X_train shape:', X_train.shape)\n",
    "print(X_train.shape[0], 'amostras de treinamento')\n",
    "print(X_test.shape[0], 'amostras de teste')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train reshape: (50000, 32, 32, 3)\n",
      "X_test reshape: (10000, 32, 32, 3)\n"
     ]
    }
   ],
   "source": [
    "if K.image_data_format() == 'channels_first':\n",
    "    X_train = X_train.reshape(X_train.shape[0], 3, 32, 32)\n",
    "    X_test = X_test.reshape(X_test.shape[0], 3, 32, 32)\n",
    "    input_shape = (3, 32, 32)\n",
    "else:\n",
    "    X_train = X_train.reshape(X_train.shape[0], 32, 32, 3)\n",
    "    X_test = X_test.reshape(X_test.shape[0], 32, 32, 3)\n",
    "    input_shape = (32, 32, 3)\n",
    "    \n",
    "# convert class vectors to binary class matrices\n",
    "\n",
    "Y_train = np_utils.to_categorical(y_train, num_classes)\n",
    "Y_test = np_utils.to_categorical(y_test, num_classes)\n",
    "\n",
    "# the generator is using tanh activation, for which we need to preprocess \n",
    "# the image data into the range between -1 and 1.\n",
    "\n",
    "X_train = np.float32(X_train)\n",
    "X_train = (X_train / 255 - 0.5) * 2\n",
    "X_train = np.clip(X_train, -1, 1)\n",
    "\n",
    "X_test = np.float32(X_test)\n",
    "X_test = (X_test / 255 - 0.5) * 2\n",
    "X_test = np.clip(X_test, -1, 1)\n",
    "\n",
    "print('X_train reshape:', X_train.shape)\n",
    "print('X_test reshape:', X_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(32, 32, 3)\n"
     ]
    }
   ],
   "source": [
    "print(X_train[0].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# latent space dimension\n",
    "\n",
    "z = Input(shape=(100,))\n",
    "\n",
    "# classes\n",
    "\n",
    "labels = Input(shape=(10,))\n",
    "\n",
    "# Generator network\n",
    "\n",
    "merged_layer = Concatenate()([z, labels])\n",
    "\n",
    "# FC: 2x2x512\n",
    "generator = Dense(2*2*512, activation='relu')(merged_layer)\n",
    "generator = BatchNormalization(momentum=0.9)(generator)\n",
    "generator = LeakyReLU(alpha=0.1)(generator)\n",
    "generator = Reshape((2, 2, 512))(generator)\n",
    "\n",
    "# # Conv 1: 4x4x256\n",
    "\n",
    "generator = Conv2DTranspose(256, kernel_size=5, strides=2, padding='same')(generator)\n",
    "generator = BatchNormalization(momentum=0.9)(generator)\n",
    "generator = LeakyReLU(alpha=0.1)(generator)\n",
    "\n",
    "# Conv 2: 8x8x128\n",
    "\n",
    "generator = Conv2DTranspose(128, kernel_size=5, strides=2, padding='same')(generator)\n",
    "generator = BatchNormalization(momentum=0.9)(generator)\n",
    "generator = LeakyReLU(alpha=0.1)(generator)\n",
    "\n",
    "# Conv 3: 16x16x64\n",
    "\n",
    "generator = Conv2DTranspose(64, kernel_size=5, strides=2, padding='same')(generator)\n",
    "generator = BatchNormalization(momentum=0.9)(generator)\n",
    "generator = LeakyReLU(alpha=0.1)(generator)\n",
    "\n",
    "# Conv 4: 32x32x3\n",
    "\n",
    "generator = Conv2DTranspose(3, kernel_size=5, strides=2, padding='same', activation='tanh')(generator)\n",
    "\n",
    "# generator = Model(inputs=[z, labels], outputs=out_g)\n",
    "\n",
    "generator = Model(inputs=[z, labels], outputs=generator, name='generator')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input_1 (InputLayer)            (None, 100)          0                                            \n",
      "__________________________________________________________________________________________________\n",
      "input_2 (InputLayer)            (None, 10)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "concatenate_1 (Concatenate)     (None, 110)          0           input_1[0][0]                    \n",
      "                                                                 input_2[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "dense_1 (Dense)                 (None, 2048)         227328      concatenate_1[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_1 (BatchNor (None, 2048)         8192        dense_1[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "leaky_re_lu_1 (LeakyReLU)       (None, 2048)         0           batch_normalization_1[0][0]      \n",
      "__________________________________________________________________________________________________\n",
      "reshape_1 (Reshape)             (None, 2, 2, 512)    0           leaky_re_lu_1[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_transpose_1 (Conv2DTrans (None, 4, 4, 256)    3277056     reshape_1[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_2 (BatchNor (None, 4, 4, 256)    1024        conv2d_transpose_1[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "leaky_re_lu_2 (LeakyReLU)       (None, 4, 4, 256)    0           batch_normalization_2[0][0]      \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_transpose_2 (Conv2DTrans (None, 8, 8, 128)    819328      leaky_re_lu_2[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_3 (BatchNor (None, 8, 8, 128)    512         conv2d_transpose_2[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "leaky_re_lu_3 (LeakyReLU)       (None, 8, 8, 128)    0           batch_normalization_3[0][0]      \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_transpose_3 (Conv2DTrans (None, 16, 16, 64)   204864      leaky_re_lu_3[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_4 (BatchNor (None, 16, 16, 64)   256         conv2d_transpose_3[0][0]         \n",
      "__________________________________________________________________________________________________\n",
      "leaky_re_lu_4 (LeakyReLU)       (None, 16, 16, 64)   0           batch_normalization_4[0][0]      \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_transpose_4 (Conv2DTrans (None, 32, 32, 3)    4803        leaky_re_lu_4[0][0]              \n",
      "==================================================================================================\n",
      "Total params: 4,543,363\n",
      "Trainable params: 4,538,371\n",
      "Non-trainable params: 4,992\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# prints a summary representation of your model\n",
    "\n",
    "generator.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# input image\n",
    "\n",
    "img_input = Input(shape=(X_train[0].shape))\n",
    "\n",
    "# Conv 1: 16x16x64\n",
    "\n",
    "discriminator = Conv2D(64, kernel_size=5, strides=2, padding='same')(img_input)\n",
    "discriminator = BatchNormalization(momentum=0.9)(discriminator)\n",
    "discriminator = LeakyReLU(alpha=0.1)(discriminator)\n",
    "\n",
    "# Conv 2:\n",
    "\n",
    "discriminator = Conv2D(128, kernel_size=5, strides=2, padding='same')(discriminator)\n",
    "discriminator = BatchNormalization(momentum=0.9)(discriminator)\n",
    "discriminator = LeakyReLU(alpha=0.1)(discriminator)\n",
    "\n",
    "# Conv 3: \n",
    "\n",
    "discriminator = Conv2D(256, kernel_size=5, strides=2, padding='same')(discriminator)\n",
    "discriminator = BatchNormalization(momentum=0.9)(discriminator)\n",
    "discriminator = LeakyReLU(alpha=0.1)(discriminator)\n",
    "\n",
    "# Conv 4: \n",
    "\n",
    "discriminator = Conv2D(512, kernel_size=5, strides=2, padding='same')(discriminator)\n",
    "discriminator = BatchNormalization(momentum=0.9)(discriminator)\n",
    "discriminator = LeakyReLU(alpha=0.1)(discriminator)\n",
    "\n",
    "# FC\n",
    "\n",
    "discriminator = Flatten()(discriminator)\n",
    "\n",
    "# Concatenate \n",
    "\n",
    "merged_layer = Concatenate()([discriminator, labels])\n",
    "discriminator = Dense(512, activation='relu')(merged_layer)\n",
    "    \n",
    "# Output\n",
    "\n",
    "discriminator = Dense(1, activation='sigmoid')(discriminator)\n",
    "\n",
    "discriminator = Model(inputs=[img_input, labels], outputs=discriminator, name='discriminator')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input_3 (InputLayer)            (None, 32, 32, 3)    0                                            \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_1 (Conv2D)               (None, 16, 16, 64)   4864        input_3[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_5 (BatchNor (None, 16, 16, 64)   256         conv2d_1[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "leaky_re_lu_5 (LeakyReLU)       (None, 16, 16, 64)   0           batch_normalization_5[0][0]      \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_2 (Conv2D)               (None, 8, 8, 128)    204928      leaky_re_lu_5[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_6 (BatchNor (None, 8, 8, 128)    512         conv2d_2[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "leaky_re_lu_6 (LeakyReLU)       (None, 8, 8, 128)    0           batch_normalization_6[0][0]      \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_3 (Conv2D)               (None, 4, 4, 256)    819456      leaky_re_lu_6[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_7 (BatchNor (None, 4, 4, 256)    1024        conv2d_3[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "leaky_re_lu_7 (LeakyReLU)       (None, 4, 4, 256)    0           batch_normalization_7[0][0]      \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_4 (Conv2D)               (None, 2, 2, 512)    3277312     leaky_re_lu_7[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_8 (BatchNor (None, 2, 2, 512)    2048        conv2d_4[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "leaky_re_lu_8 (LeakyReLU)       (None, 2, 2, 512)    0           batch_normalization_8[0][0]      \n",
      "__________________________________________________________________________________________________\n",
      "flatten_1 (Flatten)             (None, 2048)         0           leaky_re_lu_8[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "input_2 (InputLayer)            (None, 10)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "concatenate_2 (Concatenate)     (None, 2058)         0           flatten_1[0][0]                  \n",
      "                                                                 input_2[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "dense_2 (Dense)                 (None, 512)          1054208     concatenate_2[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "dense_3 (Dense)                 (None, 1)            513         dense_2[0][0]                    \n",
      "==================================================================================================\n",
      "Total params: 5,365,121\n",
      "Trainable params: 5,363,201\n",
      "Non-trainable params: 1,920\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# prints a summary representation of your model\n",
    "\n",
    "discriminator.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# # Optimizer\n",
    "\n",
    "discriminator.compile(Adam(lr=0.0002, beta_1=0.5), loss='binary_crossentropy',\n",
    "                      metrics=['binary_accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "discriminator.trainable = False\n",
    "\n",
    "label = Input(shape=(10,), name='label')\n",
    "z = Input(shape=(100,), name='z')\n",
    "\n",
    "fake_img = generator([z, label])\n",
    "validity = discriminator([fake_img, label])\n",
    "\n",
    "d_g = Model([z, label], validity, name='adversarial')\n",
    "\n",
    "d_g.compile(Adam(lr=0.0004, beta_1=0.5), loss='binary_crossentropy',\n",
    "            metrics=['binary_accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "z (InputLayer)                  (None, 100)          0                                            \n",
      "__________________________________________________________________________________________________\n",
      "label (InputLayer)              (None, 10)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "generator (Model)               (None, 32, 32, 3)    4543363     z[0][0]                          \n",
      "                                                                 label[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "discriminator (Model)           (None, 1)            5365121     generator[1][0]                  \n",
      "                                                                 label[0][0]                      \n",
      "==================================================================================================\n",
      "Total params: 9,908,484\n",
      "Trainable params: 4,538,371\n",
      "Non-trainable params: 5,370,113\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# prints a summary representation of your model\n",
    "\n",
    "d_g.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "epochs = 100\n",
    "batch_size = 32\n",
    "smooth = 0.1\n",
    "latent_dim = 100\n",
    "\n",
    "real = np.ones(shape=(batch_size, 1))\n",
    "fake = np.zeros(shape=(batch_size, 1))\n",
    "\n",
    "d_loss = []\n",
    "d_g_loss = []\n",
    "\n",
    "for e in range(epochs + 1):\n",
    "    for i in range(len(X_train) // batch_size):\n",
    "        \n",
    "        # Train Discriminator weights\n",
    "        \n",
    "        discriminator.trainable = True\n",
    "        \n",
    "        # Real samples\n",
    "        \n",
    "        X_batch = X_train[i*batch_size:(i+1)*batch_size]\n",
    "        real_labels = to_categorical(y_train[i*batch_size:(i+1)*batch_size].reshape(-1, 1), num_classes=10)\n",
    "        \n",
    "        d_loss_real = discriminator.train_on_batch(x=[X_batch, real_labels],\n",
    "                                                   y=real * (1 - smooth))\n",
    "        \n",
    "        # Fake Samples\n",
    "        \n",
    "        z = np.random.normal(loc=0, scale=1, size=(batch_size, latent_dim))\n",
    "        random_labels = to_categorical(np.random.randint(0, 10, batch_size).reshape(-1, 1), num_classes=10)\n",
    "        X_fake = generator.predict_on_batch([z, random_labels])\n",
    "        \n",
    "        d_loss_fake = discriminator.train_on_batch(x=[X_fake, random_labels], y=fake)\n",
    "         \n",
    "        # Discriminator loss\n",
    "        \n",
    "        d_loss_batch = 0.5 * (d_loss_real[0] + d_loss_fake[0])\n",
    "        \n",
    "        # Train Generator weights\n",
    "        \n",
    "        discriminator.trainable = False\n",
    "        \n",
    "        z = np.random.normal(loc=0, scale=1, size=(batch_size, latent_dim))\n",
    "        random_labels = to_categorical(np.random.randint(0, 10, batch_size).reshape(-1, 1), num_classes=10)\n",
    "        d_g_loss_batch = d_g.train_on_batch(x=[z, random_labels], y=real)\n",
    "   \n",
    "        print(\n",
    "            'epoch = %d/%d, batch = %d/%d, d_loss=%.3f, g_loss=%.3f' % (e + 1, epochs, i, len(X_train) // batch_size, d_loss_batch, d_g_loss_batch[0]),\n",
    "            100*' ',\n",
    "            end='\\r'\n",
    "        )\n",
    "    \n",
    "    d_loss.append(d_loss_batch)\n",
    "    d_g_loss.append(d_g_loss_batch[0])\n",
    "    print('epoch = %d/%d, d_loss=%.3f, g_loss=%.3f' % (e + 1, epochs, d_loss[-1], d_g_loss[-1]), 100*' ')\n",
    "\n",
    "    if e % 10 == 0:\n",
    "        samples = 10\n",
    "        z = np.random.normal(loc=0, scale=1, size=(samples, latent_dim))\n",
    "        labels = to_categorical(np.arange(0, 10).reshape(-1, 1), num_classes=10)\n",
    "        \n",
    "        x_fake = generator.predict([z, labels])\n",
    "        x_fake = np.clip(x_fake, -1, 1)\n",
    "        x_fake = (x_fake + 1) * 127\n",
    "        x_fake = np.round(x_fake).astype('uint8')\n",
    "\n",
    "        for k in range(samples):\n",
    "            plt.subplot(2, 5, k + 1, xticks=[], yticks=[])\n",
    "            plt.imshow(x_fake[k])\n",
    "            plt.title(class_names[k])\n",
    "\n",
    "        plt.tight_layout()\n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# plotting the metrics\n",
    "\n",
    "plt.plot(d_loss)\n",
    "plt.plot(d_g_loss)\n",
    "plt.title('Model loss')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Discriminator', 'Adversarial'], loc='center right')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
